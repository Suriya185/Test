name: test
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  checks: write
  packages: write

jobs:
   deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 
          
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '5.11.1'
              
    - name: Determine Version
      id: git_version # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v3.1.11       
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml  
        
    - name: create tag
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        if ! git rev-parse -q --verify "refs/tags/${{ env.GitVersion_FullSemVer }}"; then
          git tag -a ${{ env.GitVersion_FullSemVer }} -m "Incremented to ${{ env.GitVersion_FullSemVer }}"
          git push origin ${{ env.GitVersion_FullSemVer }}
        else
          echo "Tag ${{ env.GitVersion_FullSemVer }} already exists. Skipping tag creation."
        fi
  #  versioning:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
        
  #     - name: Print
  #       run: echo ${{github.ref}}
        
  #     - name: Fetch All Tags
  #       run: |
  #         # Fetch all tags from the repository
  #         git fetch --tags

  #     - name: Get Latest Tag
  #       id: get_latest_tag
  #       run: |
  #         # Get the latest tag
  #         LATEST_TAG=$(git describe --tags --abbrev=0 || echo "0.1.0")
  #         echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
  #         echo "::set-output name=latest_tag::$LATEST_TAG"

  #     - name: Increment Version
  #       id: increment_version
  #       run: |
  #         # Extract version components
  #         VERSION=${LATEST_TAG:-0.1.0}
  #         MAJOR=$(echo $VERSION | cut -d '.' -f 1)
  #         MINOR=$(echo $VERSION | cut -d '.' -f 2)
  #         PATCH=$(echo $VERSION | cut -d '.' -f 3)
  #         NEW_PATCH=$((PATCH + 1))
  #         NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
  #         echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
  #         echo "::set-output name=new_version::$NEW_VERSION"

  #     - name: Create New Tag
  #       run: |
  #         git config user.name "GitHub Actions"
  #         git config user.email "actions@github.com"
  #         git tag -a $NEW_VERSION -m "Incremented to $NEW_VERSION"
  #         git push origin $NEW_VERSION
